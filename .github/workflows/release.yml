name: Release

on:
  push:
    tags:
      - 'v*'
permissions:
  contents: write
  
jobs:
  create-release:
    runs-on: ubuntu-latest
    
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false

  build-static:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build static website
        run: npm run build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Create static website archive
        run: |
          cd dist  # or your build output directory
          zip -r ../static-website-${{ github.ref_name }}.zip .
        
      - name: Upload static build Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./static-website-${{ github.ref_name }}.zip
          asset_name: TaskManager-Static-Web.zip
          asset_content_type: application/octet-stream
  
  build-and-upload:
    needs: create-release
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Electron app
      run: npm run electron-build
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload Release Assets (Linux)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: "./dist-electron/Menedżer Zadań-1.0.0.AppImage"
        asset_name: TaskManager-Linux.AppImage
        asset_content_type: application/octet-stream
    
    - name: Upload Release Assets (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: "./dist-electron/Menedżer Zadań Setup 1.0.0.exe"
        asset_name: TaskManager-Windows-Setup.exe
        asset_content_type: application/octet-stream
    
    - name: Upload Release Assets (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: "./dist-electron/Menedżer Zadań-1.0.0-arm64.dmg"
        asset_name: TaskManager-macOS.dmg
        asset_content_type: application/octet-stream
